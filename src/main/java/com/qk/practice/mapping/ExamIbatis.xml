<?xml version="1.0" encoding="UTF-8" ?><!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" ><mapper namespace="com.qk.practice.dao.IExamDao">	<resultMap type="Exam" id="ExamResultMap">		<id property="exmaId" column="exma_id"/>		<result property="subjectId" column="subject_id"/>		<result property="code" column="code"/>		<result property="title" column="title"/>		<result property="decription" column="description"/>		<result property="isPublic" column="is_public"/>		<result property="duration" column="duration"/>		<result property="statusId" column="status_id"/>		<result property="isDelete" column="is_delete"/>		<result property="createdTime" column="created_time"/>		<result property="lastModifiedBy" column="last_modified_by"/>		<result property="lastModifiedTime" column="last_modified_time"/>		<association property="subject" select="com.qk.practice.dao.ISubjectDao.getSubjectById" column="subject_id" javaType="Subject"/>		<collection property="practices" select="com.qk.practice.dao.IAnwserDao.getPracticeByExamId" column="exma_id" ofType="Practice"/>		<collection property="tags" select="com.qk.practice.dao.ITagDao.getTagByExamId" column="exam_id" ofType="Tag"></collection>	</resultMap>	<sql id="Exam_Column_List">		exma_id,subject_id,code,title,description,is_public,duration,status_id,		is_delete,created_time,last_modified_by,last_modified_time	</sql>		<select id="getExamById" resultMap="ExamResultMap" parameterType="java.lang.String">		select <include refid="Exam_Column_List"></include>		from exam		where is_delete = 'N' and exam_id = #{examId}	</select>		<select id="getExams" resultMap="ExamResultMap" parameterType="Exam">		select e.exma_id,e.subject_id,e.code,e.title,e.description,e.is_public,e.duration,e.status_id,			   e.is_delete,e.created_time,e.last_modified_by,e.last_modified_time		from exam e, subject s		where e.subject_id = s.subject_id and e.is_delete = 'N'		<if test="examId != null" >	    	and e.exam_id = #{examId}	    </if>	    <if test="code != null" >	    	and e.code = #{code}	    </if>	    <if test="title != null" >	    	and e.title like '%${title}%'	    </if>	    <if test="subject != null and subject.name != null" >	    	and s.name = #{subject.name}	    </if>	    <if test="statusId != null" >	    	and e.status_id = #{statusId}	    </if>	    <if test="isPublic != null" >	    	and e.is_public = #{isPublic}	    </if>	</select>		<update id="deleteExamPracitcesByExamId" parameterType="ExamPracitce">		update exam_practice set 		is_delete = 'Y',		last_modified_by = #{lastModifiedBy},	    last_modified_time = unix_timestamp() * 1000		where exam_id = #{examId}	</update>		<update id="deleteExamPracitceByPracticeId" parameterType="ExamPractice">		<if test="examId != null">			update exam_practice set			is_delete = 'Y',			last_modified_by = #{lastModifiedBy},	    	last_modified_time = unix_timestamp() * 1000			where exam_id = #{examId}			<if test="practiceId != null">				practice_id = #{practiceId}			</if>		</if>	</update>		<update id="updateExamById" parameterType="Exam">		update exam	    set code = #{code},	        title = #{title},	        description = #{description},	        is_public = #{isPublic},	        status_id = #{statusId},	        duration = #{duration},	        last_modified_by = #{lastModifiedBy},	        last_modified_time = unix_timestamp() * 1000	        <if test="subject != null and subject.subjectId != null">	        	,subject_Id = #{subject.subjectId}	        </if>	      where exam_id = #{examId}	  </update>	  	  <!-- insert -->	  <insert id="insertExam" parameterType="Exam">	    insert into exam	    <trim prefix="(" suffix=")" suffixOverrides="," >	      <include refid="Exam_Column_List" />	    </trim>	    <trim prefix="values (" suffix=")" suffixOverrides="," >	        #{examId},	      <if test="subject != null" >	        #{subject.subjectId},	      </if>	      #{code},#{title},#{description},#{isPublic},#{duration},#{statusId},'N',#{createdTime},#{lastModifiedBy},unix_timestamp() * 1000	    </trim>	  </insert>	  	  <insert id="insertExamPractice" parameterType="ExamPractice">	  	insert exam_practice (exam_pratice_id,exma_id,practice_id,score,is_delete,created_time,last_modified_by,last_modified_time)	    values(#{examPraticeId},#{exmaId},#{practiceId},#{score},'N',#{createdTime},#{lastModifiedBy},unix_timestamp() * 1000)	  </insert>	  	  <insert id="insertExamPractices" parameterType="java.util.List">  		<selectKey resultType="java.lang.String" keyProperty="examPraticeId" order="BEFORE">              SELECT UUID()        </selectKey>          insert exam_practice (exam_pratice_id,exma_id,practice_id,score,is_delete,created_time,last_modified_by,last_modified_time)        values          <foreach collection="list" item="item" index="index" separator="," >              (#{examPraticeId},#{exmaId},#{practiceId},#{score},'N',#{createdTime},#{lastModifiedBy},unix_timestamp() * 1000)         </foreach>       </insert>              <insert id="insertExamTag" parameterType="ExamTag">      	insert into exam_tag (exam_tag_id,tag_id, exam_id, is_delete,created_time,last_modified_by,last_modified_time)      	values (#{examTagId},#{tagId},#{examId},'N',#{createdTime},#{lastModifiedBy},unix_timestamp() * 1000)      </insert></mapper>